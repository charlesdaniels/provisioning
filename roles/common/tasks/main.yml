---
- name: Install sources.list
  template:
      src: sources.list
      dest: /etc/apt/sources.list
      mode: 0644
  become_user: root
  become_method: sudo
  become: yes

- name: Update and upgrade apt packages
  apt:
    upgrade: yes
    update_cache: yes
  become_user: root
  become_method: sudo
  become: yes


- name: CLI tools
  apt: pkg={{ item }} state=latest
  with_items:
      - vim
      - zsh
      - python
      - python-pip
      - python3
      - python3-pip
      - htop
      - tmux
      - slurm
      - nload
      - nmap
      - netcat
      - iotop
      - bash
      - build-essential
      - git
      - tree
      - imagemagick
      - youtube-dl
      - lm-sensors
      - texlive
      - python3-sphinx
      - curl
      - pkg-config
      - cmake

  become: yes
  become_user: root
  become_method: sudo

- name: System Services and Drivers
  apt: pkg={{ item }} state=latest
  with_items:
      - snapd
      - bluez

  become: yes
  become_user: root
  become_method: sudo

- name: Libraries
  apt: pkg={{ item }} state=latest
  with_items:
      - python3-yaml
      - python-psutil
      - python3-psutil
      - python3-numpy
      - python3-scipy
      - python3-matplotlib
      - python3-recommonmark
      - python3-tabulate
      - python3-humanize
      - python3-taglib
      - libgit2-dev
      - libssh2-1-dev
      - libssl-dev
      - openssl

  become: yes
  become_user: root
  become_method: sudo

- name: Install Rust
  shell: 'if [ ! -x "$(which cargo)" ] ; then curl https://sh.rustup.rs -sSf | sh -s -- -y ; fi'

- name: rustup update
  shell: "{{ ansible_env.HOME }}/.cargo/bin/rustup update"

# Note that cargo install will error if the target is already installed, hence
# the checks.
- name: Install Cargo Crates
  shell: 'if ! {{ ansible_env.HOME }}/.cargo/bin/cargo install --list | grep {{ item }} ; then {{ ansible_env.HOME }}/.cargo/bin/cargo install {{ item }} ; fi'
  with_items:
      - cargo-update
      - exa
      - ripgrep

- name: Ensure Repos Directory Exists
  file: path={{ ansible_env.HOME}}/.local/share/setupsoftware state=directory

- name: Clone dotfiles
  git:
    repo: 'git://github.com/charlesdaniels/dotfiles.git'
    dest: '{{ ansible_env.HOME}}/.local/share/setupsoftware/dotfiles'
    update: yes
    clone: yes
    recursive: yes
    version: next

- name: Clone charles-util
  git:
    repo: 'git://github.com/charlesdaniels/charles-util.git'
    dest: '{{ ansible_env.HOME}}/.local/share/setupsoftware/charles-util'
    update: yes
    clone: yes
    recursive: yes

- name: Clone herc-tools-public
  git:
    repo: 'git://github.com/HeRCLab/herc-tools-public.git'
    dest: '{{ ansible_env.HOME}}/.local/share/setupsoftware/herc-tools-public'
    update: yes
    clone: yes
    recursive: yes

- name: Install dotfiles
  command: sh install.sh
  args:
    chdir: '{{ ansible_env.HOME}}/.local/share/setupsoftware/dotfiles'


- name: Install charles-util
  command: make install
  args:
    chdir: '{{ ansible_env.HOME}}/.local/share/setupsoftware/charles-util'

- name: Install herc-tools-public
  command: make install
  args:
    chdir: '{{ ansible_env.HOME}}/.local/share/setupsoftware/herc-tools-public'


